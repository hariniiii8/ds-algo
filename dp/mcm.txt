class Solution{
public:
    int matrixMultiplication(int N, int arr[])
    {
        // code here
          memset(t, -1, sizeof(t));
        return solve(arr, 1, N-1);
    }
     int t[101][101];
    int solve(int arr[], int i, int j){
        if(i>=j){
            return 0;
        }
        if(t[i][j] !=-1){
            return t[i][j];
        }
        int mn = INT_MAX;
        for(int k =i; k<=j-1; k++){
            int tempans = solve(arr, i, k) + solve(arr, k+1, j) + arr[i-1] * arr[k] * arr[j];
            if(mn > tempans){
                mn = tempans;
            }
        }
        return t[i][j] = mn;
    }

};



using vector
class Solution {
public:
    int matrixMultiplication(int N, int arr[]) {
        // code here
        t.assign(N, vector<int>(N, -1)); // Initialize the 2D vector
        return solve(arr, 1, N - 1);
    }

    vector<vector<int>> t;

    int solve(int arr[], int i, int j) {
        if (i >= j) {
            return 0;
        }
        if (t[i][j] != -1) {
            return t[i][j];
        }
        int mn = INT_MAX;
        for (int k = i; k <= j - 1; k++) {
            int tempans = solve(arr, i, k) + solve(arr, k + 1, j) + arr[i - 1] * arr[k] * arr[j];
            if (mn > tempans) {
                mn = tempans;
            }
        }
        return t[i][j] = mn;
    }
};