class Solution {
public:
    int minDistance(string word1, string word2) {
        int deletee=word1.length()-longestCommonSubsequence(word1,word2);
        int insert=word2.length()-longestCommonSubsequence(word1,word2);
        return deletee+insert;
        
    }
    vector<vector<int>> dp; 

    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        dp.assign(n + 1, vector<int>(m + 1, -1));
         
         int count=findlcs(text1,text2,n,m);
         return count;

    }

    private:
     int findlcs(string text1,string text2,int n,int m)
    {
for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < m + 1; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                }
            }
        }

        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < m + 1; j++) {
                if (text1[i - 1] == text2[j - 1]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[n][m];
    }



};