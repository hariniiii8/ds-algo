class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int> vis(V,0);
        vector<int> ans;
        
        dfs(0,adj,ans,vis);
        return ans;
        
    }
    void dfs(int node,vector<int> adj[],vector<int> &ans,vector<int> &vis)
        {
            vis[node]=1;
            ans.push_back(node);
            for(auto it:adj[node])
            {
                if(vis[it]!=1)
                {
                     dfs(it,adj,ans,vis);
                }
               
            }
        }
};

// pass the addresses in the functions
//while writin the code, the vis[node]=1 should be marked in the recurseive fn and not in the parent fn, bcoz when recursion runs each time, it gets marked for different nodes
//dont forget to add the node to the final ans
//start the traversal with the root 0 node
//call a recursive fn which runs on all neighbours of root 
//root calls  neighbour1, the neighbor1 calls its neighbours and so on
//then root calls neighbour 2 and it calls its neighbours and so on
//this way all the nodes r traversed