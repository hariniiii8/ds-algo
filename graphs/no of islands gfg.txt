class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int count = 0;
        vector<vector<int>> vis(n, vector<int>(m, 0));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (vis[i][j] != 1 && grid[i][j] == '1') {
                    count++;
                    bfs(i, j, vis, grid);
                }
            }
        }
        return count;
    }

private:
void bfs(int i, int j, vector<vector<int>>& vis, vector<vector<char>>& grid) {
        queue<pair<int, int>> q;
        q.push({i, j});
        vis[i][j] = 1;
        int n = grid.size();
        int m = grid[0].size();
        
        while (!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            
            for (int x = -1; x <= 1; x++) {
                for (int y = -1; y <= 1; y++) {
                    int nrow = row + x;
                    int ncol = col + y;

                    if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == '1' && vis[nrow][ncol] != 1) {
                        vis[nrow][ncol] = 1;
                        q.push({nrow, ncol});
                    }
                }
            }
        }
    }
};

//here in gfg version, consider even the diagonally connected nodes in all 8 directions
//in leetcode, only in 4 directions, up down right left