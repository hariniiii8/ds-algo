//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> vis(V,0);
        pq.push({0,0});
        int sum=0;
        while(!pq.empty())
        {
            int node=pq.top().second;
            int wt=pq.top().first;
            pq.pop();
            if(vis[node]==1)
            {
                continue;
            }
            vis[node]=1;
            sum+=wt;
            
            for(auto it: adj[node])
            {
                int edgeWt=it[1];
                int adjNode=it[0];
                if(vis[adjNode]!=1)
                {
                    pq.push({edgeWt,adjNode});
                }
            }
        }
        return sum;
    }
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends




or:
auto it = pq.top();
			pq.pop();
			int node = it.second;
			int wt = it.first;\


for mst:


  int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<int> vis(V,0);
        vector<pair<int,int>> mst;
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>> ,greater<pair<int,pair<int,int>>>> pq;
        pq.push({0,{0,-1}});
        
        int sum=0;
        while(pq.size()){
            int dis = pq.top().first;
            int node = pq.top().second.first;
            int parent = pq.top().second.second;
            pq.pop();
            
            if(vis[node])continue;            
            if(parent!= -1)
             mst.push_back({node,parent});
            vis[node] = 1;
            sum += dis;
            for(auto it : adj[node]){
                int adjNode = it[0];
                int edgeW = it[1];
                
                if(!vis[adjNode]){
                    pq.push({edgeW,{adjNode,node}});
                }
            }
        }
        // printing mst
        // for(auto it : mst){
        //     cout<<it.first<<" "<<it.second<<endl;
        // }

        return sum;
    }