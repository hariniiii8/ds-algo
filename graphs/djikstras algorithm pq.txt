#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    vector<int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> dist(V, INT_MAX);
        dist.at(S) = 0;
        pq.push({0, S});

        while (!pq.empty())
        {
            int dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            for (auto it : adj[node])
            {
                int edgeWeight = it[1];
                int adjNode = it[0];
                if (dis + edgeWeight < dist[adjNode])
                {
                    dist[adjNode] = dis + edgeWeight;
                    pq.push({dist[adjNode], adjNode});
                }
            }
        }
        return dist;
    }
};

int main()
{
    int V, E, S;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<vector<int>> adj[V];
    cout << "Enter the edges and their weights (u v w):" << endl;
    for (int i = 0; i < E; ++i)
    {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v, w});
    }

    cout << "Enter the source vertex: ";
    cin >> S;

    Solution solution;
    vector<int> shortestDistances = solution.dijkstra(V, adj, S);

    cout << "Shortest distances from source vertex " << S << ":" << endl;
    for (int i = 0; i < V; ++i)
    {
        cout << "Vertex " << i << ": " << shortestDistances[i] << endl;
    }

    return 0;
}
