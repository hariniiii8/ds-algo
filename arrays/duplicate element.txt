class Solution {
public:
    int findDuplicate(vector<int>& nums) {
            for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                if(nums[i]==nums[j])
                {
                    return nums[i];
                }
            }
        }
        return -1;
        
    }
};


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]==nums[i+1])
            {
                return nums[i];
            }

        }
        return -1;
        
    }
};

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        vector<int> hash(n, 0);

        for (int i = 0; i < n; i++) {
            hash[nums[i]]++;
        }

        for (int i = 0; i < n; i++) { // Start from 1 and go up to n - 1
            if (hash[i] > 1) {
                return i;
            }
        }

        return -1;
    }
};


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
vector<int> freq(n+1,0);
  for (int i = 0; i < n; i++) {
    if (freq[nums[i]] == 0) {
      freq[nums[i]] += 1;
    } else {
      return nums[i];
    }
  }
  return 0;

        
    }
};




