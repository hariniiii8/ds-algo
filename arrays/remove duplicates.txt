tc o(n) sc o(n)

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
       vector<int> ans;
       ans.push_back(nums[0]);
       for(int i=1;i<nums.size();i++)
       {
           if(nums[i]==nums[i-1])
           {
              continue ;
           }
           else{
               ans.push_back(nums[i]);
           }
           
       } 
       for(int i=0;i<ans.size();i++)
       {
           nums[i]=ans[i];
       }
       int nn=ans.size();
       return nn;
    }
};


class Solution {
    public int removeDuplicates(int[] nums) {
        int i=0;
        for (int j=1;j<nums.length;j++)
        {
            if(nums[i]!=nums[j])
            {
                i++;
                nums[i]=nums[j];
            }
        

        }
        return i+1;
    }
}

j is used to find the first non duplicate element
all the elements between i and j are duplicates
so increment i and swap it with j