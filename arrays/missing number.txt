
optimal:
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<n;i++)
        {
           sum=sum+nums[i];
        }
        int rem=((n*(n+1))/2) - sum;
        return rem;
    }
};

brute:
class Solution {
public:
    int missingNumber(vector<int>& nums) {
       int n=nums.size();
       for(int i=0;i<n+1;i++)
       {
           int flag=0;
           for(int j=0;j<n;j++)
           {
               if(nums[j]==i)
               {
                   flag=1;
               }
           }
           if(flag==0)
           {
               return i;
           }
       } 
       return -1;
    }
};


optimal:
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int res;
        int xor1=0;
        int xor2=0;
        for(int i=0;i<nums.size();i++)
        {
           xor1=xor1^nums[i];
           xor2=xor2^(i+1);
        }
         res=xor1^xor2;
        
        return res;
    }
};


better solution:
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        vector<int> hash(n + 1, 0);
        for(int i=0;i<n;i++){
            hash[nums[i]]++;
        }
        for(int i=0;i<=n;i++)
        {
            if(hash[i]==0)
            {
                return i;
            }
        }
        return -1;
    }
};



