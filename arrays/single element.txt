
optimal:
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int xor1=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            xor1=xor1^nums[i];
        }
        return xor1;


    }
};


brute:
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int n = nums.size();

        for (int i = 0; i < n; i++) {
            int count = 0;

            
            for (int j = 0; j < n; j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }

            
            if (count == 1) {
                return nums[i];
            }
        }

      
        return -1;
    }
};

testcases passed , but time limit exceeded


using map:
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        map<int,int> mpp;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            mpp[nums[i]]++;

        }
        for(auto it:mpp)
        {
            if(it.second==1)
            {
                return it.first;
            }
        }
        return -1;
    }
};


can also be done by hashmap but it doesnt run