
merge sort way:
vector < int > FindUnion(int arr1[], int arr2[], int n, int m) {
  int i = 0, j = 0; // pointers
  vector < int > Union; // Uninon vector
  while (i < n && j < m) {
    if (arr1[i] <= arr2[j]) // Case 1 and 2
    {
      if (Union.size() == 0 || Union.back() != arr1[i])
        Union.push_back(arr1[i]);
      i++;
    } else // case 3
    {
      if (Union.size() == 0 || Union.back() != arr2[j])
        Union.push_back(arr2[j]);
      j++;
    }
  }
  while (i < n) // IF any element left in arr1
  {
    if (Union.back() != arr1[i])
      Union.push_back(arr1[i]);
    i++;
  }
  while (j < m) // If any elements left in arr2
  {
    if (Union.back() != arr2[j])
      Union.push_back(arr2[j]);
    j++;
  }
  return Union;
}



map:
#include <vector>
#include <map>

using namespace std;

vector<int> sortedArray(vector<int> a, vector<int> b) {
    map<int, int> mpp; // Declare std::map<int, int>
    vector<int> temp;
    
    for (int i = 0; i < a.size(); i++) {
        mpp[a[i]]++;
    }
    
    for (int i = 0; i < b.size(); i++) {
        mpp[b[i]]++;
    }
    
    for (auto it : mpp) {
        temp.push_back(it.first);
    }
    
    return temp;
}

dont use unordered map, random order

using set:
set doesnt store duplicate values
dont use unordered set , bcoz keys r stored in random order


#include <set>

vector < int > sortedArray(vector < int > a, vector < int > b) {
    // Write your code here
    set<int> s;
    vector<int> temp;
    for(int i=0;i<a.size();i++)
    {
        s.insert(a[i]);
    }
     for(int i=0;i<b.size();i++)
    {
        s.insert(b[i]);
    }
    for(auto it:s)
    {
        temp.push_back(it);
    }
    return temp;
}
