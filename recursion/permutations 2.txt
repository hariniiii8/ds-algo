class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int> >res;
        recursion(nums, 0, nums.size(), res);
        return res;
    }
    void recursion(vector<int> num, int i, int j, vector<vector<int> > &res) {
        if (i == j-1) {
            res.push_back(num);
            return;
        }
        for (int k = i; k < j; k++) {
            if (i != k && num[i] == num[k]) continue;
            swap(num[i], num[k]);
            recursion(num, i+1, j, res);
        }
    }
};


the below code doesnt work for some cases:
learn why in comment section of leetcode
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        per(0, nums, ans);
        return ans;
    }
    
    void per(int ind, vector<int>& nums, vector<vector<int>>& ans) {
        if (ind == nums.size()) {
            ans.push_back(nums);
            return;
        }
        
        for (int i = ind; i < nums.size(); i++) {
            if (i != ind && nums[i] == nums[i-1]) {
                continue; 
            }
            swap(nums[ind], nums[i]);
            per(ind + 1, nums, ans);
            swap(nums[ind], nums[i]); 
        }
    }
};