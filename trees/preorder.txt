class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
         vector<int> preOrder;
        preorder(root, preOrder);
        return preOrder;
        
    }
     void preorder(TreeNode* cur, vector<int>& preOrder) {
        if (cur == NULL) {
            return;
        }
         preOrder.push_back(cur->val);
        preorder(cur->left, preOrder);  // Traverse the left subtree
         
        preorder(cur->right, preOrder); // Traverse the right subtree
    }
};



class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> pre;
        stack<TreeNode*> s;
        TreeNode* curr=root;
        if(root==NULL)
        {
            return pre;
        }
        s.push(curr);
        while(!s.empty())
        {
            TreeNode *cur=s.top();
            pre.push_back(cur->val);
            s.pop();
            if(cur->right!=NULL)
            {
                s.push(cur->right);
            }
             if(cur->left!=NULL)
            {
                s.push(cur->left);
            }

        }
        return pre;
        
    }
};