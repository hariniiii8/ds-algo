class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector < int > inOrder;
  stack < TreeNode * > s;
  TreeNode* curr=root;
  while (true) {
    if (curr != NULL) {
      s.push(curr);
      curr = curr -> left;
    } else {
      if (s.empty()) break;
      curr = s.top();
      inOrder.push_back(curr -> val);
      s.pop();
      curr = curr -> right;
    }
  }
  return inOrder;
        
    }
};



class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
       vector<int> inOrder;
        inorder(root, inOrder);
        return inOrder;     
    }
    void inorder(TreeNode* cur, vector<int>& inOrder) {
        if (cur == NULL) {
            return;
        }
        
        inorder(cur->left, inOrder);  // Traverse the left subtree
        inOrder.push_back(cur->val);  // Visit the current node
        inorder(cur->right, inOrder); // Traverse the right subtree
    }
};