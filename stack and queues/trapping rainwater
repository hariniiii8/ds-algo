brute:
class Solution {
public:
    int trap(vector<int>& height) {
      int n=height.size();
        int res = 0;
        for (int i = 1; i < n - 1; ++i) 
       {
            int maxR=0,maxL=0;
            for(int j=i;j<height.size();j++)
            {
                maxR=max(maxR,height[j]);
            }
            for(int k=i;k>=0;k--)
            {
                maxL=max(maxL,height[k]);
            }
            res+=min(maxL,maxR)-height[i];
       } 
       return res;
    }
};

better:
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int trap(vector<int>& height) {
        int res = 0;
        int n = height.size();
        vector<int> pre(n), suf(n);

        int preSum = 0, sufSum = 0;
        for (int i = 0; i < n; i++) {
            preSum = max(preSum, height[i]);
            pre[i] = preSum;
        }

        for (int i = n - 1; i >= 0; i--) {
            sufSum = max(sufSum, height[i]);
            suf[i] = sufSum;
        }

        for (int i = 0; i < n; i++) {
            res += min(pre[i], suf[i]) - height[i];
        }

        return res;
    }
};


optimal:

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        int i=0,j=n-1;
        int res=0;
        int leftMax=0,rightMax=0;
        while(i<=j)
        {
if(height[i]<=height[j])
    {
        if(height[i]>=leftMax)
        {
            leftMax=height[i];
        }
        else
        {
            res+=leftMax-height[i];
        }
        i++;
    }
    else
    {
       if(height[j]>=rightMax)
        {
            rightMax=height[j];
        }
        else
        {
            res+=rightMax-height[j];
        } 
        j--;
    }
        }
        return res;
    }
};
